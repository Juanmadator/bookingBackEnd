/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.booking.generated.web.controllers;

import java.math.BigDecimal;

import com.booking.base.services.BuildingCreationException;
import com.booking.base.services.BuildingNotFoundException;
import com.booking.generated.web.model.Building;
import com.booking.generated.web.model.BuildingsGet200Response;
import com.booking.generated.web.model.BuildingsGet404Response;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-04-19T11:24:03.558366200+02:00[Europe/Madrid]", comments = "Generator version: 7.4.0")
@Validated
@Tag(name = "buildings", description = "Everything about your buildings")
public interface BuildingsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /buildings : Add a new building
     * Add a new building to the booking app
     *
     * @param building Create a new building (required)
     * @return Successful operation (status code 200)
     *         or Invalid input (status code 400)
     *         or Validation exception (status code 422)
     */
    @Operation(
        operationId = "addBuilding",
        summary = "Add a new building",
        description = "Add a new building to the booking app",
        tags = { "buildings" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Building.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input"),
            @ApiResponse(responseCode = "422", description = "Validation exception")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/buildings",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Building> addBuilding(
        @Parameter(name = "Building", description = "Create a new building", required = true) @Valid @RequestBody Building building
    ) throws BuildingCreationException {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"placeType\" : { \"label\" : \"label\" }, \"bookables\" : [ { \"slots\" : 1, \"label\" : \"label\" }, { \"slots\" : 1, \"label\" : \"label\" } ], \"name\" : \"name\", \"description\" : \"description\", \"photo\" : \"photo\", \"location\" : { \"address\" : \"address\", \"latitude\" : 0.8008281904610115, \"longitude\" : 6.027456183070403 }, \"services\" : [ { \"label\" : \"label\" }, { \"label\" : \"label\" } ], \"daysOfWeek\" : [ { \"isClosed\" : true, \"closingTime\" : \"closingTime\", \"openingTime\" : \"openingTime\", \"day\" : \"day\" }, { \"isClosed\" : true, \"closingTime\" : \"closingTime\", \"openingTime\" : \"openingTime\", \"day\" : \"day\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /buildings : Get all buildings
     * Get all buildings
     *
     * @param page Page number (optional, default to 1)
     * @param pageSize Page size (optional, default to 3)
     * @return List of buildings succesfully (status code 200)
     *         or Doesn´t exist any building (status code 404)
     */
    @Operation(
        operationId = "buildingsGet",
        summary = "Get all buildings",
        description = "Get all buildings",
        tags = { "buildings" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of buildings succesfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BuildingsGet200Response.class))
            }),
            @ApiResponse(responseCode = "404", description = "Doesn´t exist any building", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BuildingsGet404Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/buildings",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BuildingsGet200Response> buildingsGet(
        @Parameter(name = "page", description = "Page number", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "1") Integer page,
        @Parameter(name = "pageSize", description = "Page size", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageSize", required = false, defaultValue = "3") Integer pageSize
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"pagination\" : \"\", \"data\" : [ { \"placeType\" : { \"label\" : \"label\" }, \"bookables\" : [ { \"slots\" : 1, \"label\" : \"label\" }, { \"slots\" : 1, \"label\" : \"label\" } ], \"name\" : \"name\", \"description\" : \"description\", \"photo\" : \"photo\", \"location\" : { \"address\" : \"address\", \"latitude\" : 0.8008281904610115, \"longitude\" : 6.027456183070403 }, \"services\" : [ { \"label\" : \"label\" }, { \"label\" : \"label\" } ], \"daysOfWeek\" : [ { \"isClosed\" : true, \"closingTime\" : \"closingTime\", \"openingTime\" : \"openingTime\", \"day\" : \"day\" }, { \"isClosed\" : true, \"closingTime\" : \"closingTime\", \"openingTime\" : \"openingTime\", \"day\" : \"day\" } ] }, { \"placeType\" : { \"label\" : \"label\" }, \"bookables\" : [ { \"slots\" : 1, \"label\" : \"label\" }, { \"slots\" : 1, \"label\" : \"label\" } ], \"name\" : \"name\", \"description\" : \"description\", \"photo\" : \"photo\", \"location\" : { \"address\" : \"address\", \"latitude\" : 0.8008281904610115, \"longitude\" : 6.027456183070403 }, \"services\" : [ { \"label\" : \"label\" }, { \"label\" : \"label\" } ], \"daysOfWeek\" : [ { \"isClosed\" : true, \"closingTime\" : \"closingTime\", \"openingTime\" : \"openingTime\", \"day\" : \"day\" }, { \"isClosed\" : true, \"closingTime\" : \"closingTime\", \"openingTime\" : \"openingTime\", \"day\" : \"day\" } ] } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"error\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /buildings/{id} : Get a single building
     * Get a single building based on the Id
     *
     * @param id  (required)
     * @return Succesfull operation (status code 200)
     *         or Invalid id provided (status code 400)
     *         or Not valid method (status code 405)
     */
    @Operation(
        operationId = "getBuilding",
        summary = "Get a single building",
        description = "Get a single building based on the Id",
        tags = { "buildings" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Succesfull operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Building.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid id provided"),
            @ApiResponse(responseCode = "405", description = "Not valid method")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/buildings/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Building> getBuilding(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") BigDecimal id
    ) throws BuildingNotFoundException {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"placeType\" : { \"label\" : \"label\" }, \"bookables\" : [ { \"slots\" : 1, \"label\" : \"label\" }, { \"slots\" : 1, \"label\" : \"label\" } ], \"name\" : \"name\", \"description\" : \"description\", \"photo\" : \"photo\", \"location\" : { \"address\" : \"address\", \"latitude\" : 0.8008281904610115, \"longitude\" : 6.027456183070403 }, \"services\" : [ { \"label\" : \"label\" }, { \"label\" : \"label\" } ], \"daysOfWeek\" : [ { \"isClosed\" : true, \"closingTime\" : \"closingTime\", \"openingTime\" : \"openingTime\", \"day\" : \"day\" }, { \"isClosed\" : true, \"closingTime\" : \"closingTime\", \"openingTime\" : \"openingTime\", \"day\" : \"day\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /buildings/update/{id} : Update an existing building
     * Update an existing building based on the Id provided
     *
     * @param id  (required)
     * @param building Update an existing building in the booking application (optional)
     * @return Successful operation (status code 200)
     *         or Invalid ID provided (status code 400)
     *         or Building not found (status code 404)
     */
    @Operation(
        operationId = "updateBuilding",
        summary = "Update an existing building",
        description = "Update an existing building based on the Id provided",
        tags = { "buildings" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Building.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID provided"),
            @ApiResponse(responseCode = "404", description = "Building not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/buildings/update/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Building> updateBuilding(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") BigDecimal id,
        @Parameter(name = "Building", description = "Update an existing building in the booking application") @Valid @RequestBody(required = false) Building building
    ) throws BuildingCreationException {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"placeType\" : { \"label\" : \"label\" }, \"bookables\" : [ { \"slots\" : 1, \"label\" : \"label\" }, { \"slots\" : 1, \"label\" : \"label\" } ], \"name\" : \"name\", \"description\" : \"description\", \"photo\" : \"photo\", \"location\" : { \"address\" : \"address\", \"latitude\" : 0.8008281904610115, \"longitude\" : 6.027456183070403 }, \"services\" : [ { \"label\" : \"label\" }, { \"label\" : \"label\" } ], \"daysOfWeek\" : [ { \"isClosed\" : true, \"closingTime\" : \"closingTime\", \"openingTime\" : \"openingTime\", \"day\" : \"day\" }, { \"isClosed\" : true, \"closingTime\" : \"closingTime\", \"openingTime\" : \"openingTime\", \"day\" : \"day\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
